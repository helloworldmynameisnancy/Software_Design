x canary test

x cell behavior test

x generate signals for a cell
x given a (live) cell at position 2, 3, it generates eight signals for positions (1, 2), (1, 3), (1, 4), (2, 2), (2, 4), (3, 2), (3, 3), (3, 4)
x given a (live) cell at position 3, 3, it generates eight signals for positions (2, 2), (2, 3), (2, 4), (3, 2), (3, 4), (4, 2), (4, 3), (4, 4)
x given a (live) cell at positions 2, 4 it generates eight signals for positions (1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 3), (3, 4), (3, 5)
x given a (live) cell at position 0, 0 it generates eight signals for positions (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)

x generate signals for multiple cells
x given no position, generateSignalsForMultipleCells returns an empty list
x given one position, generateSignalsForMultipleCells returns eight positions
x given two positions, generateSignalsForMultipleCells returns sixteen positions
x given three positions, generateSignalsForMultipleCells returns twenty four positions

x given no signals, count is empty
x given one signal, count is cell -> 1
x given two signals, count is cell1 -> 1, cell2 -> 1
x given three signals with cell1 repeated, count is cell1 -> 2, cell2 -> 1

x given no cells, generate an empty set for the next generation
x given one cell, generate an empty set for the next generation
x given two cells next to each other, generate an empty set for the next generation
x given three cells at (0, 0), (2, 0), (1, 1) check the next generation

x given Block, computeNextGeneration returns the same block
x given Beehive, computeNextGeneration returns the same Beehive
x given horizontal blinker, computeNextGeneration returns vertical blinker
x given vertical blinker, computeNextGeneration returns horizontal blinker
x given glider with one live cell on the top, computeNextGeneration returns proper result with that cell moving to the right

x give an empty list, getBounds returns a tuple of (0, 0) and (10, 10)
x given one point, getBounds returns a tuple of (pointX - 10, pointY - 10) and (pointX + 10, pointY + 10)
x given two points, getBounds returns a tuple so that both the points given are within the bounds, with the outermost offset by 10 in each direction
x given three points, getBounds returns a tuple so that points given are within the bounds, with the outermost offset by 10 in each direction
x given four different points (note from the previous tests)

Let us create a GUI to display the cells.
x 1. let's read from a file initial_cells.txt the initial cells. Let's key in the following cells:
  (2, 2), (2, 3), (2, 4), (5, 2), (6, 2), (7, 2)
x 2. Exclude the GUI code from coverage
x 3. Let the GUI display the next generation once every second
x 4. Let us add a new task in pavement.py called run that runs the GUI.

